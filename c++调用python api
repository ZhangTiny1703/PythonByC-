(一) 初始化和关闭Python解释器

#include<Python.h>

Py_Initialize();
…
Py_Finalize();

(二) load Python模块

又分为以下两种方式

(1) 直接Load一个Python写好的文件

PyObject *pName,*pModule;

PyRun_SimpleString("import sys"); //导入系统模块

PyRun_SimpleString("sys.path.append('./')"); //指定pytest.py所在的目录

pName = PyString_FromString("pytest"); //指定要导入的文件名

pModule = PyImport_Import(pName); //将pytest.py导入模块指针pModule

(2) Load一个已经安装好的Python模块

PyObject* pModule;

pModule = PyImport_Import(PyString_FromString(“ptest”)); //将pytest导入模块指针pModule

(三) 从pModule模块里load需要调用的函数并执行

又分为以下两种方式

(1) 从模块里直接load一个函数 

PyObject *pfunc, *args, *results;

Pfunc= PyObject_GetAttrString(pModule, "func"); //pModule是上一步load好的Python模块

args = Py_BuildValue("(i)",12345); //设置调用func时的输入变量，这里假设为12345

results= PyObject_CallObject(Pfunc, args); //执行func(12345)，并将结果返回给results

(2) 从模块里load一个类，然后调用类内部的函数 (假设类名叫Executor, 初始化需要当前文件夹下的配置文件config.txt, 函数名叫func)

PyObject *pClass, *pDict,*pInstance, *class_args, *results;

pDict = PyModule_GetDict(pModule); //拿到pModule里的所有类和函数定义

pClass=PyDict_GetItemString(pDict,"Executor"); //找到名为Executor的类

class_args = Py_BuildValue("(s)","./config.txt"); //设置类初始化需要的参数

pInstance=PyInstance_New(pClass, class_args, NULL ); //初始化Executor，建立实例pInstance

results=PyObject_CallMethod(pInstance,"func","(i)",12345); // 执行pInstance.func(12345)

(四) C++向Python传递参数

因为在Python中，所有的类型都经过了一层封装，导致C++的参数需要做一个类型转换，转换成PyObject*才能传入Python。
例如C++的一个int就是个整数，该值占用8bytes(64位)的存储空间，而一个Python的int其实是一个PyObject* 指向的24bytes的结构。
前8bytes是个整数，代表引用次数，中间8bytes是个指向int类型定义的指针，最后8bytes才是这个int的值。
所以C++和Python之间参数的互相传递都需要调用Python提供的API。

假设函数的输入变量有三个分别为一个整数(i)，一个浮点数(f)和一个字符串(s)

PyObject* args = PyTuple_New(3);

PyObject* arg1 = Py_BuildValue("i", 100); // 整数参数

PyObject* arg2 = Py_BuildValue("f", 3.14); // 浮点数参数

PyObject* arg3 = Py_BuildValue("s", "hello"); // 字符串参数

PyTuple_SetItem(args, 0, arg1);

PyTuple_SetItem(args, 1, arg2);

PyTuple_SetItem(args, 2, arg3);

以上函数可简化为

PyObject* args = Py_BuildValue("(ifs)", 100, 3.14, "hello");

如果输入参数是另一个Python函数的输出结果PyObject* results (o)

PyObject* args = Py_BuildValue("(o)", results);

具体参数格式Parsing arguments and building values

(五) 解析Python的返回值PyObject* results

同C++传递参数到Python类似，调用解析函数

单个返回值：PyArg_Parse()

多返回值：PyArg_ParseTuple()
